.{
    .name = "zui",
    // This is a [Semantic Version](https://semver.org/).
    // In a future version of Zig it will be used for package deduplication.
    .version = "0.0.0",

    // This field is optional.
    // This is currently advisory only; Zig does not yet do anything
    // with this value.
    //.minimum_zig_version = "0.11.0",

    // This field is optional.
    // Each dependency must either provide a `url` and `hash`, or a `path`.
    // `zig build --fetch` can be used to fetch all dependencies of a package, recursively.
    // Once all dependencies are fetched, `zig build` no longer requires
    // internet connectivity.
    .dependencies = .{
        .raylib = .{
            .url = "https://codeload.github.com/raysan5/raylib/tar.gz/c7b362d19dd32b00a0fce90bc9abe8afd3d4b754",
            .hash = "12202b102eadc20a885909eaa18bb0c5d9c82b13e77f091ca51ee0cfd8e600cae0e5",
        },
        .@"mach-freetype" = .{
            .url = "https://codeload.github.com/hexops/mach-freetype/tar.gz/dc4a5d8ce14f8678f35bdaf197303091e22b1f27",
            .hash = "122070070dd2c402d94c279d64d4a4d154691ad49f46fa2c24ed7c6e4e4f5c531477",
        },
    },
    .paths = .{
        // This makes *all* files, recursively, included in this package. It is generally
        // better to explicitly list the files and directories instead, to insure that
        // fetching from tarballs, file system paths, and version control all result
        // in the same contents hash.
        "",
        // For example...
        //"build.zig",
        //"build.zig.zon",
        //"src",
        //"LICENSE",
        //"README.md",
    },
}
